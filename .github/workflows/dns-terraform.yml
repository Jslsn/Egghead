name: "DNS Terraform Plan/Apply"

on:
  workflow_call:
    inputs:
      domain_name:
        required: true
        type: string
      bucket_name:
        required: true
        type: string
      aws_region:
        required: true
        type: string
      cloudfront_domain_name:
        required: true
        type: string
      cloudfront_zone_id:
        required: true
        type: string

jobs:
  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.tfplanExitCode }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: AWS Assume
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GH-AWS-OIDC
          aws-region: ${{ inputs.aws_region }}

      - name: Terraform Init
        run: |
          terraform init \
          -backend-config=region=${{ secrets.AWS_REGION }} \
          -backend-config=bucket=${{ secrets.AWS_S3_BUCKET }} \
          -backend-config=key="jslsn/just-listen-site/dns/terraform.tfstate" \
          -backend-config=dynamodb_table=${{ secrets.AWS_DDB }} \
          -backend-config=encrypt=true
        working-directory: terraform/deployments/dns

      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan \
          -var="aws_region=${{ inputs.aws_region }}" \
          -var="domain_name=${{ inputs.domain_name }}" \
          -var="cloudfront_domain_name=${{ inputs.cloudfront_domain_name }}" \
          -var="cloudfront_zone_id=${{ inputs.cloudfront_zone_id }}" \
          -var="bucket_name=${{ inputs.bucket_name }}" || export exitcode=$?

          echo "tfplanExitCode=$exitcode" >> $GITHUB_OUTPUT
        working-directory: terraform/deployments/dns

      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: dns-tfplan
          path: terraform/deployments/dns/tfplan

  terraform-apply:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    if: needs.terraform-plan.outputs.tfplanExitCode == '2'
    needs: [terraform-plan]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: AWS Assume
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GH-AWS-OIDC
          aws-region: ${{ inputs.aws_region }}

      - name: Terraform Init
        run: |
          terraform init \
          -backend-config=region=${{ secrets.AWS_REGION }} \
          -backend-config=bucket=${{ secrets.AWS_S3_BUCKET }} \
          -backend-config=key="jslsn/just-listen-site/dns/terraform.tfstate" \
          -backend-config=dynamodb_table=${{ secrets.AWS_DDB }} \
          -backend-config=encrypt=true
        working-directory: terraform/deployments/dns

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: dns-tfplan
          path: terraform/deployments/dns

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve tfplan
        working-directory: terraform/deployments/dns
